services:

  postgres:
    image: postgres:17
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - violation-net

  minio:
    image: "minio/minio"
    container_name: minio
    hostname: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio:/data
    env_file:
      - .env
    networks:
      - violation-net

  mc:
    image: minio/mc
    container_name: mc
    hostname: mc
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minio minio123)
      do
        echo '...waiting...' && sleep 1;
      done;
      /usr/bin/mc mb minio/violations;
      /usr/bin/mc policy set public minio/violations;
      exit 0;
      "
    depends_on:
      - minio
    networks:
      - violation-net

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9092:9092'
      - '9094:9094'
    env_file:
      - .env
    volumes:
      - kafka:/bitnami/kafka
    networks:
      - violation-net
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 5s
      retries: 20

  backend:
    image: hnammm/violation-backend:latest
    container_name: backend
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    networks:
      - violation-net
    depends_on:
      postgres:
        condition: service_started
      minio:
        condition: service_started
      kafka:
        condition: service_healthy

  detect-consumer:
    image: hnammm/violation-detect-consumer:latest
    container_name: detect_consumer
    volumes:
      - ./backend:/app
    env_file:
      - .env
    networks:
      - violation-net
    command: ["/venv/bin/python", "-m", "kafka_handlers.detect_consumer.consumer"]
    depends_on:
      minio:
        condition: service_started
      kafka:
        condition: service_healthy

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      LOGGING_LEVEL_ROOT: 'DEBUG'
    volumes:
      - /c/tools/kafka/kui/config.yml:/etc/kafkaui/dynamic_config.ya
    networks:
      - violation-net

volumes:
  postgres:
  minio:
  kafka:

networks:   
  violation-net:
    name: violation-net
    driver: bridge
